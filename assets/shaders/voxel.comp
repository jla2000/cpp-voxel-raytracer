#version 440 core
#extension GL_NV_gpu_shader5 : enable

// For fixing floating point errors
#define EPSILON 0.0001
#define INV_GAMMA 0.4545

layout(local_size_x = 10, local_size_y = 10) in;
layout(rgba32f, binding = 0) uniform image2D colorOutput;
layout(rgba32f, binding = 1) uniform image2DArray noiseArray;

uniform uvec3 randomness;

layout(binding = 0) buffer voxelIndices {
    uint8_t indices[];
};

layout(binding = 1) buffer voxelPalette {
    uint32_t palette[];
};

layout(binding = 2) buffer voxelSolid {
    uint8_t solid[];
};

uniform uvec3 mapSize;
uniform uint frameCount;
uniform uint numSamples;
uniform int numRayBounces;
uniform int maxDDADepth;
uniform vec3 sunDir;
uniform bool enableShadows;
uniform bool enableGlobalIllumination;
uniform bool enableRayRandomization;
uniform float shadowMultiplier;

uniform mat4 invView;
uniform mat4 invCenteredView;
uniform mat4 invProjection;

#include "sky.glsl"
#include "box.glsl"
#include "random.glsl"
#include "dda.glsl"

struct Material {
    bool metal;
    vec3 albedo;
    vec3 emissive;
};

struct VoxelHit {
    bool hit;
    vec3 position;
    vec3 normal;
    Material material;
};

bool inVoxelBuffer(ivec3 vx) {
    return (vx.x >= 0 && vx.x < mapSize.x) &&
    (vx.y >= 0 && vx.y < mapSize.y) &&
    (vx.z >= 0 && vx.z < mapSize.z);
}

vec4 decodeColor(uint32_t paletteColor) {
    uvec4 color;
    color.x = paletteColor >> 24;
    color.y = paletteColor >> 16;
    color.z = paletteColor >> 8;
    color.w = paletteColor;
    return vec4(color & 0xff) / 255.0;
}

void getVoxel(vec3 pos, inout VoxelHit hit) {
    uvec3 voxelPos = uvec3(pos);
    // FIXME: assuming mapSize is same all axis
    uint voxelIdx = voxelPos.z*mapSize.y*mapSize.x + voxelPos.y*mapSize.x + voxelPos.x;
    uint8_t voxelColorIndex = indices[voxelIdx];

    if (solid[voxelIdx] != 0u) {
        hit.hit = true;
        hit.material.albedo = decodeColor(palette[voxelColorIndex]).xyz;
        hit.material.emissive = vec3(0);
        hit.material.metal = false;
    }
}

VoxelHit traceVoxel(vec3 rayPos, vec3 rayDir) {
    DDA dda;
    initDDA(dda, rayPos, rayDir);

    VoxelHit hit;
    hit.hit = false;

    for (int i = 0; i < maxDDADepth; ++i) {
        if (inVoxelBuffer(ivec3(dda.pos))) {
            getVoxel(dda.pos, hit);
            if (hit.hit) {
                hit.position = rayPos + dda.dist * rayDir;
                hit.normal = dda.normal;
                // Visualize normals
                //hit.material.albedo = abs(hit.normal);
                break;
            }
        }

        iterDDA(dda);
    }

    return hit;
}

bool pointIsShadowed(vec3 point) {
    vec3 lightDir = normalize(sunDir);

    DDA lightDDA;
    initDDA(lightDDA, point, lightDir);

    for (int i = 0; i < maxDDADepth; ++i) {
        iterDDA(lightDDA);

        VoxelHit lightHit;
        lightHit.hit = false;
        getVoxel(lightDDA.pos, lightHit);

        if (!inVoxelBuffer(ivec3(lightDDA.pos))) {
            return false;
        }

        if (lightHit.hit) {
            return true;
        }
    }

    return false;
}

vec4 traceRay(vec3 rayPos, vec3 rayDir, ivec2 outputCoords) {
    vec3 invRayDir = 1.0 / rayDir;
    vec2 intersection = intersectBox(rayPos, invRayDir, vec3(0, 0, 0), mapSize);
    vec3 origRayPos = rayPos;

    // Ray hits the voxel box
    if (intersection.x <= intersection.y) {
        // Advance ray start to box
        if (intersection.x > 0) {
            rayPos += rayDir * (intersection.x - 3*EPSILON);
        }

        VoxelHit hit;
        vec3 color = vec3(0);
        float depth = 0;
        float lightMultiplier = 1.0;

        // First ray bounce
        hit = traceVoxel(rayPos, rayDir);
        if (hit.hit) {
            depth = length(hit.position - origRayPos);

            if (enableShadows && pointIsShadowed(hit.position)) {
                lightMultiplier = shadowMultiplier;
            }
            color = lightMultiplier * hit.material.albedo;

            if (enableGlobalIllumination) {
                for (int bounce = 1; bounce < numRayBounces; ++bounce) {
                    rayPos = hit.position;
                    //rayDir = hit.normal + randomUnitVector(outputCoords, bounce);
                    rayDir = hit.normal + randomInHemisphere(outputCoords, bounce, hit.normal);
                    hit = traceVoxel(rayPos, rayDir);

                    if (hit.hit) {
                        // Apply albedo
                        color *= hit.material.albedo;
                    } else {
                        // comment out to induce sky color effect
                        // color *= skyColor(rayDir);

                        return vec4(color, depth);
                    }
                }
                // Ray did not reach sky -> black
                color = vec3(0);
            }
        } else {
            color = skyColor(rayDir);
        }

        return vec4(color, depth);
    } else {
        return vec4(skyColor(rayDir), 0);
    }
}


void main() {
    ivec2 outputCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screenSize = imageSize(colorOutput);

    uint rngState = randomSeed(outputCoords, frameCount);

    vec2 rayNoise = vec2(0);
    if (enableRayRandomization) {
        rayNoise = vec2(randomFloat(rngState), randomFloat(rngState));
    }
    vec2 screenCoords = (vec2(outputCoords) + rayNoise) / screenSize * 2 - 1;

    vec3 rayPos = (invView * vec4(0, 0, 0, 1)).xyz;
    vec3 rayDir = normalize((invCenteredView * invProjection * vec4(screenCoords, 0, 1)).xyz) + EPSILON;
    //vec3 rayPos = (invView * invProjection * vec4(screenCoords * 2, 0, 1)).xyz;
    //vec3 rayDir = normalize((invCenteredView * invProjection * vec4(0, 0, 0, 1)).xyz) + EPSILON;

    vec4 pixelColor = traceRay(rayPos, rayDir, outputCoords);
    pixelColor.xyz = clamp(pow(pixelColor.xyz, vec3(INV_GAMMA)), vec3(0), vec3(1));

    vec4 prevPixelColor = imageLoad(colorOutput, outputCoords);
    pixelColor = mix(prevPixelColor, pixelColor, (1.0 / float(numSamples)));

    imageStore(colorOutput, outputCoords, pixelColor);
}
